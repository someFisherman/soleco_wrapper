workflows:
  ios_signed:
    name: iOS signed (Optimizer ‚Äì TestFlight)
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
      groups:
        # Muss enthalten:
        # APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_ISSUER_ID,
        # APP_STORE_CONNECT_PRIVATE_KEY, (optional) CERTIFICATE_PRIVATE_KEY
        - appstore_connect
      vars:
        BUNDLE_ID: ch.soleco.optimizer
        EXPORT_METHOD: app-store   # "app-store" (TestFlight) oder "ad-hoc"
        # Optional: TEAM_ID kann gesetzt werden (10-stellig, z. B. ABCDE12345)
        # TEAM_ID: ABCDE12345

    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - ios/Pods

    scripts:
      - name: Resolve deps & iOS 13+
        script: |
          set -euxo pipefail
          flutter --version
          flutter pub get
          if [ ! -d ios ]; then
            flutter create . --platforms=ios
          fi
          cd ios
          sed -i.bak -e "s/platform :ios, '.*'/platform :ios, '13.0'/" Podfile || true
          pod repo update
          cd ..

      - name: Set app name & bundle id (Optimizer)
        script: |
          set -euxo pipefail
          INFO="ios/Runner/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName Optimizer" "$INFO" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string Optimizer" "$INFO"
          /usr/libexec/PlistBuddy -c "Set :CFBundleName Optimizer" "$INFO" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleName string Optimizer" "$INFO"
          sed -i.bak -E "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]+;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/g" ios/Runner.xcodeproj/project.pbxproj

      - name: üîë Fetch signing files (automatic)
        script: |
          set -euxo pipefail
          test -n "${APP_STORE_CONNECT_KEY_IDENTIFIER}"
          test -n "${APP_STORE_CONNECT_ISSUER_ID}"
          test -n "${APP_STORE_CONNECT_PRIVATE_KEY}"

          keychain initialize

          if [ "$EXPORT_METHOD" = "ad-hoc" ]; then
            SIGNING_TYPE="IOS_APP_ADHOC"
          else
            SIGNING_TYPE="IOS_APP_STORE"
          fi

          if [ -n "${CERTIFICATE_PRIVATE_KEY:-}" ]; then
            app-store-connect fetch-signing-files \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --certificate-key "$CERTIFICATE_PRIVATE_KEY" \
              --type "$SIGNING_TYPE" \
              --create \
              "$BUNDLE_ID"
          else
            app-store-connect fetch-signing-files \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --type "$SIGNING_TYPE" \
              --create \
              "$BUNDLE_ID"
          fi

          keychain add-certificates
          xcode-project use-profiles

      # --- Build + Archive + Export via xcodebuild (statt flutter build ipa) ---
      - name: Build & Archive (Release)
        script: |
          set -euxo pipefail
          flutter clean
          # (Optional) Release-Build, damit Pods & Settings warm sind
          flutter build ios --release

          # Archiv erstellen (nutzt die via 'use-profiles' gesetzten Profile)
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            -archivePath build/ios/archive/Runner.xcarchive \
            archive \
            CODE_SIGN_STYLE=Automatic

      - name: Export IPA (Release)
        script: |
          set -euxo pipefail
          # exportOptions.plist generieren
          cat > exportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>__METHOD__</string>
            <key>signingStyle</key><string>automatic</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>destination</key><string>export</string>
            <key>thinning</key><string>&lt;none&gt;</string>
          </dict>
          </plist>
          PLIST
          /usr/libexec/PlistBuddy -c "Set :method ${EXPORT_METHOD}" exportOptions.plist
          if [ -n "${TEAM_ID:-}" ]; then
            /usr/libexec/PlistBuddy -c "Add :teamID string ${TEAM_ID}" exportOptions.plist || \
            /usr/libexec/PlistBuddy -c "Set :teamID ${TEAM_ID}" exportOptions.plist
          fi

          # Export der IPA
          rm -rf build/ios/ipa
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist exportOptions.plist

          echo "=== IPA(s) ==="
          find build/ios/ipa -name "*.ipa" -print || true
          IPA_PATH="$(ls -1 build/ios/ipa/*.ipa 2>/dev/null || true)"
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå Keine .ipa erzeugt. Pr√ºfe die Xcode-Logs oberhalb (Provisioning/Assets)."
            exit 1
          fi
          echo "‚úÖ IPA gefunden: $IPA_PATH"

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        # Optional: bestimmte Gruppen
        # beta_groups:
        #   - Internal Testers

    artifacts:
      - build/ios/ipa/*.ipa
