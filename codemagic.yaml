workflows:
  ios_signed:
    name: iOS signed (Optimizer)
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
      groups:
        - appstore_connect          # <- enthÃ¤lt API-Key Variablen
      vars:
        BUNDLE_ID: ch.soleco.optimizer
        EXPORT_METHOD: app-store    # app-store ODER ad-hoc

    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - ios/Pods

    scripts:
      - name: Resolve deps & iOS 13+
        script: |
          set -euxo pipefail
          flutter --version
          flutter pub get
          # iOS-GerÃ¼st sicherstellen (nur falls noch nicht vorhanden)
          if [ ! -d ios ]; then
            flutter create . --platforms=ios
          fi
          # iOS-Minimum OS
          cd ios
          sed -i.bak -e "s/platform :ios, '.*'/platform :ios, '13.0'/" Podfile || true
          cd ..

      - name: Set app name & bundle id (Optimizer)
        script: |
          set -euxo pipefail
          INFO="ios/Runner/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName Optimizer" "$INFO" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string Optimizer" "$INFO"
          /usr/libexec/PlistBuddy -c "Set :CFBundleName Optimizer" "$INFO" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleName string Optimizer" "$INFO"
          # Bundle-ID im Xcode-Projekt setzen
          sed -i.bak -E "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]+;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/g" ios/Runner.xcodeproj/project.pbxproj

      - name: ðŸ”‘ Fetch signing files (automatic)
        script: |
          set -euxo pipefail
          # Secrets vorhanden?
          test -n "${APP_STORE_CONNECT_KEY_IDENTIFIER}"
          test -n "${APP_STORE_CONNECT_ISSUER_ID}"
          test -n "${APP_STORE_CONNECT_PRIVATE_KEY}"

          keychain initialize

          # Export-Methode wÃ¤hlen
          if [ "$EXPORT_METHOD" = "ad-hoc" ]; then
            SIGNING_TYPE="IOS_ADHOC"
          else
            SIGNING_TYPE="IOS_APP_STORE"
          fi

          # Profile & Zertifikate automatisch erstellen/holen
          app-store-connect fetch-signing-files \
            --type "$SIGNING_TYPE" \
            --bundle-id "$BUNDLE_ID" \
            --create

          # Zertifikate importieren & Profile anwenden
          keychain add-certificates
          xcode-project use-profiles

      - name: Build signed IPA (Release)
        script: |
          set -euxo pipefail
          flutter clean
          # Eindeutige Buildnummern (Codemagic Built-in Vars)
          flutter build ipa --release \
            --build-name=1.0.$PROJECT_BUILD_NUMBER \
            --build-number=$PROJECT_BUILD_NUMBER
          echo "IPA(s):"
          ls -la build/ios/ipa || true

    publishing:
      app_store_connect:
        # Auth via Umgebungsvariablen (aus der Gruppe)
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID

        # TestFlight
        submit_to_testflight: true
        # Optional: vorhandene TestFlight-Gruppe(n) eintragen
        # (falls keine angegeben sind, stehen interne Tester trotzdem zur VerfÃ¼gung)
        # beta_groups:
        #   - Internal Testers

        # (Optional) App Store Auto-Submission/Release â€“ erst spÃ¤ter aktivieren:
        # submit_to_app_store: true
        # cancel_previous_submissions: true
        # release_type: AFTER_APPROVAL  # MANUAL | AFTER_APPROVAL | SCHEDULED
        # earliest_release_date: 2025-10-05T10:00:00+02:00

    artifacts:
      - build/ios/ipa/*.ipa
