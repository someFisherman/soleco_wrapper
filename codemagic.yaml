workflows:
  ios_signed:
    name: iOS signed (Optimizer ‚Äì TestFlight)
    instance_type: mac_mini_m2
    environment:
      flutter: stable
      xcode: latest
      groups:
        # Gruppe muss enthalten:
        # APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_ISSUER_ID,
        # APP_STORE_CONNECT_PRIVATE_KEY, (optional) CERTIFICATE_PRIVATE_KEY
        - appstore_connect
      vars:
        BUNDLE_ID: ch.soleco.optimizer
        EXPORT_METHOD: app-store   # "app-store" (TestFlight) oder "ad-hoc"

    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - ios/Pods

    scripts:
      - name: Resolve deps & iOS 13+
        script: |
          set -euxo pipefail
          flutter --version
          flutter pub get
          # iOS-Ger√ºst anlegen, falls nicht vorhanden
          if [ ! -d ios ]; then
            flutter create . --platforms=ios
          fi
          # iOS-Minimum OS setzen & CocoaPods aktualisieren
          cd ios
          sed -i.bak -e "s/platform :ios, '.*'/platform :ios, '13.0'/" Podfile || true
          pod repo update
          cd ..

      - name: Set app name & bundle id (Optimizer)
        script: |
          set -euxo pipefail
          INFO="ios/Runner/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName Optimizer" "$INFO" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string Optimizer" "$INFO"
          /usr/libexec/PlistBuddy -c "Set :CFBundleName Optimizer" "$INFO" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleName string Optimizer" "$INFO"
          # Bundle-ID im Projekt setzen
          sed -i.bak -E "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]+;/PRODUCT_BUNDLE_IDENTIFIER = ${BUNDLE_ID};/g" ios/Runner.xcodeproj/project.pbxproj

      - name: üîë Fetch signing files (automatic)
        script: |
          set -euxo pipefail
          # App Store Connect Secrets vorhanden?
          test -n "${APP_STORE_CONNECT_KEY_IDENTIFIER}"
          test -n "${APP_STORE_CONNECT_ISSUER_ID}"
          test -n "${APP_STORE_CONNECT_PRIVATE_KEY}"

          keychain initialize

          # Export-Typ w√§hlen
          if [ "$EXPORT_METHOD" = "ad-hoc" ]; then
            SIGNING_TYPE="IOS_APP_ADHOC"
          else
            SIGNING_TYPE="IOS_APP_STORE"
          fi

          # Mit/ohne CERTIFICATE_PRIVATE_KEY
          if [ -n "${CERTIFICATE_PRIVATE_KEY:-}" ]; then
            app-store-connect fetch-signing-files \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --certificate-key "$CERTIFICATE_PRIVATE_KEY" \
              --type "$SIGNING_TYPE" \
              --create \
              "$BUNDLE_ID"
          else
            app-store-connect fetch-signing-files \
              --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
              --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              --private-key "$APP_STORE_CONNECT_PRIVATE_KEY" \
              --type "$SIGNING_TYPE" \
              --create \
              "$BUNDLE_ID"
          fi

          keychain add-certificates
          xcode-project use-profiles

      - name: Build signed IPA (Release)
        script: |
          set -euxo pipefail
          flutter clean
          flutter build ipa --release \
            --build-name=1.0.$PROJECT_BUILD_NUMBER \
            --build-number=$PROJECT_BUILD_NUMBER

          echo "=== Inhalt unter build/ios ==="
          find build/ios -maxdepth 3 -type f -print || true

          IPA_PATH="$(ls -1 build/ios/ipa/*.ipa 2>/dev/null || true)"
          if [ -z "${IPA_PATH}" ]; then
            echo "‚ùå Keine .ipa erzeugt. Pr√ºfe die Build-Logs oberhalb (CodeSign/Xcode/Assets/Bundle-ID)."
            exit 1
          fi
          echo "‚úÖ IPA gefunden: ${IPA_PATH}"

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        # Optional:
        # beta_groups:
        #   - Internal Testers

    artifacts:
      - build/ios/ipa/*.ipa
